<?php

namespace Dada\AdvertisementBundle\Repository;
use Dada\AdvertisementBundle\Entity\Category;

/**
 * AdvertisementRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdvertisementRepository extends \Doctrine\ORM\EntityRepository{

    /**
     * Retuns all items in the given page for the given user
     * @param $page int Page number
     * @param $user User User object
     * @param $nbItems int Nb items to show on a single page
     * @return array
     */
    public function findByPageAndUser($page, $user, $nbItems){
        $query = $this->createQueryBuilder('a')
            ->where('a.user = :user')
            ->setParameter('user', $user)
            ->setFirstResult((($page-1)*$nbItems))
            ->setMaxResults($nbItems)
            ->addOrderBy('a.public', 'desc')
            ->addOrderBy('a.published', 'asc');
        return $query->getQuery()->getResult();
    }

    /**
     * Return $nb last adverts
     * @param $nb int number of results to return
     * @return array
     */
    public function findLast($nb){
        if(!is_numeric($nb) && $nb > 0)
            throw new \InvalidArgumentException('An integer value was expected');
        $query = $this->createQueryBuilder('a')
            ->where('a.public = true')
            ->orderBy('a.published', 'desc')
            ->setMaxResults(6);
        return $query->getQuery()->getResult();
    }

    /**
     * Return number of pages
     *
     * @param $user User
     * @param $nbItems int Number of items per page
     * @return int number of pages
     */
    public function findPageCount($user, $nbItems){
        $query = $this->createQueryBuilder('a')
            ->select('COUNT(a.id)')
            ->where('a.user = :user')
            ->setParameter('user', $user);
        $result = $query->getQuery()->getSingleScalarResult();
        return ceil($result/$nbItems);
    }

    /**
     * Return all entries published > to $maxDays
     *
     * @param $maxDays int number of days after what Adevrts are automatically unpublished
     * @return array Advertisemenst
     */
    public function cleanOldEntries($maxDays){
        $time = new \DateTime();
        $interval = new \DateInterval('P'.$maxDays.'D');
        $time->sub($interval);
        $query = $this->createQueryBuilder('a')
            ->where('a.public = true')
            ->andWhere('a.published < :time')
            ->setParameter('time', $time);
        return $query->getQuery()->getResult();
    }

    /**
     * Return all adverts in the given coords.
     * @param $latitude float latitude
     * @param $longitude float longitude
     * @param $radius int radius (in minutes)
     * @param $page int Page number
     * @param $nbItems int Number of items per page
     * @param null $categ Category -> if set, returns only Advertisements for selected Category
     * @return array Advertisement founds
     */
    public function findByCoords($latitude, $longitude, $radius, $page, $nbItems, $categ = null){
        $query = $this->_em->createQuery($this->getSearchQuery(!is_null($categ)));
        $query->setParameter('lat_min', ((float)$latitude)-($radius/120)) //120 because we're adding half of the radius on each coord.
            ->setParameter('lat_max', ((float)$latitude)+($radius/120))
            ->setParameter('long_min', ((float)$longitude)-($radius/120))
            ->setParameter('long_max', ((float)$longitude)+($radius/120));
        if(!is_null($categ)){
            $query->setParameter('categorie', $categ);
        }
        if($page > 0){
            $query->setFirstResult((($page - 1) * $nbItems))
                ->setMaxResults($nbItems);
        }
        return $query->getResult();
    }

    /**
     * Count number of adverts for current research
     * @param $latitude float latitude
     * @param $longitude float longitude
     * @param $radius int Number of Minutes for radius
     * @param null $categ Category -> if set, restrain count only for selected Category
     * @return int Number of result
     */
    public function getNbAdverts($latitude, $longitude, $radius, $categ = null){
        $query = $this->_em->createQuery($this->getSearchQuery(!is_null($categ), true));
        $query->setParameter('lat_min', ((float)$latitude)-($radius/120)) //120 because we're adding half of the radius on each coord.
        ->setParameter('lat_max', ((float)$latitude)+($radius/120))
            ->setParameter('long_min', ((float)$longitude)-($radius/120))
            ->setParameter('long_max', ((float)$longitude)+($radius/120));
        if(!is_null($categ)){
            $query->setParameter('categorie', $categ);
        }
        return $query->getSingleScalarResult();
    }

    /**
     * Return all Advertisements for a given Category
     *
     * @param Category $category
     * @return array
     */
    public function findByCategory(Category $category){
        $query = $this->createQueryBuilder('a')
            ->innerJoin('a.category', 'c')
            ->where('c.id = :cat')
            ->setParameter('cat', $category);
        return $query->getQuery()->getResult();
    }

    /**
     * Simple function to store the big search query in only one place
     *
     * @param $categ bool add categ param?
     * @return string DQL query
     */
    private function getSearchQuery($categ, $count = false){
        $dql = 'SELECT '.(($count) ? 'COUNT(a.id)' : 'a').' FROM DadaAdvertisementBundle:Advertisement a INNER JOIN a.category c INNER JOIN DadaAdvertisementBundle:Town t WHERE (t.latitude BETWEEN :lat_min AND :lat_max) AND (t.longitude BETWEEN :long_min AND :long_max) AND a.public = true';
        if($categ){
            $dql .= ' AND c.id = :categorie';
        }
        return $dql;
    }

}
